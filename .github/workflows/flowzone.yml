name: Flowzone

on:
  workflow_call:
    secrets:
      FLOWZONE_TOKEN:
        description: "Personal access token (PAT) for the GitHub service account with admin/owner permissions"
        required: true
      NPM_TOKEN:
        required: true
      DOCKER_REGISTRY_USER:
        required: true
      DOCKER_REGISTRY_PASS:
        required: true
      BALENA_API_KEY_PUSH:
        required: true
      BALENA_API_KEY_TEST:
        required: false
      COMPOSE_VARS:
        required: false
      GPG_PRIVATE_KEY:
        description: "GPG private key exported with `gpg --armor --export-secret-keys ...` to sign commits"
        required: true
      GPG_PASSPHRASE:
        description: "Passphrase to decrypt GPG private key"
        required: true
    inputs:
      working_directory:
        description: "GitHub actions working directory"
        type: string
        required: false
        default: "."
      required_approving_review_count:
        description: "Setting this value to zero effectively means merge==deploy without approval(s)"
        type: string
        required: false
        default: "1"
      docker_images:
        description: "Newline separated list of images (without tags) to push, default is no push"
        type: string
        required: false
      docker_cache_from:
        description: "Newline separated list of additional external cache sources"
        type: string
        required: false
      docker_platforms:
        description: "Newline separated list of target platforms, default is linux/amd64"
        type: string
        required: false
        default: linux/amd64
      docker_context:
        description: "Docker build context directory, default is ./"
        type: string
        required: false
      docker_file:
        description: "Path to the Dockerfile relative to the context, default is ./Dockerfile"
        type: string
        required: false
      docker_target:
        description: "Sets the target stage to build"
        type: string
        required: false
      balena_deploy_slugs:
        description: "Newline separated list of balenaCloud apps, fleets, or blocks to deploy"
        type: string
        required: false
      node_version:
        description: "Node.js version to use for NPM projects"
        type: string
        required: false
        default: "16.x"

jobs:
  protect-branch:
    name: Protect branch
    runs-on: ubuntu-latest
    # only run on PR open and synchronize events
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' && github.base_ref == github.event.repository.default_branch }}

    outputs:
      result: ${{ steps.apply_branch_protection_rules.outputs.result }}

    defaults:
      run:
        working-directory: .
        shell: bash

    steps:
      - name: Apply branch protection rules
        id: apply_branch_protection_rules
        run: |
          url='${{ github.api_url }}/repos/${{ github.repository }}/branches/${{ github.event.repository.default_branch }}/protection'

          result="$(curl --silent -X PUT "${url}" \
            -H 'Accept: application/vnd.github+json' \
            -H 'Authorization: Bearer ${{ secrets.FLOWZONE_TOKEN }}' \
            -d '{
            "required_status_checks": {
              "strict": true,
              "contexts": [
                "Flowzone / Protect branch",
                "Flowzone / Checks",
                "Flowzone / NPM",
                "Flowzone / Docker",
                "Flowzone / balena",
                "VersionBot/generate-version"
              ]
            },
            "enforce_admins": false,
            "required_pull_request_reviews": {
              "dismissal_restrictions": {
                "users": [],
                "teams": []
              },
              "dismiss_stale_reviews": false,
              "require_code_owner_reviews": false,
              "required_approving_review_count": ${{ inputs.required_approving_review_count }},
              "bypass_pull_request_allowances": {
                "users": [],
                "teams": []
              }
            },
            "restrictions": null,
            "required_linear_history": false,
            "allow_force_pushes": false,
            "allow_deletions": false,
            "block_creations": false,
            "required_conversation_resolution": false
          }')"

          echo ::set-output name=result::"${result}"

  versionist:
    name: Versionist
    runs-on: ubuntu-latest
    # only run on push to the default branch and skip events triggered by balena-ci
    if: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch && !contains(github.event.head_commit.author.name, 'balena-ci') }}

    outputs:
      version: ${{ steps.versionist.outputs.version }}

    defaults:
      run:
        working-directory: .
        shell: bash

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # full depth required to generate changelogs
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Import GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Run versionist
        id: versionist
        run: |
          npm install --location=global versionist@v6.7.1 balena-versionist@v0.14.5
          jq '.type' repo.yml 2>/dev/null || echo "type: generic" > repo.yml
          balena-versionist --silent=false
          VERSION="v$(head -n1 VERSION || jq -r '.version' package.json)"
          echo "::set-output name=version::${VERSION}"

      - name: Commit and push changes
        env:
          VERSION: ${{ steps.versionist.outputs.version }}
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
        run: |
          git add -A
          git commit -m "${VERSION}"
          git tag -a "${VERSION}" -m "${VERSION}"
          git push origin HEAD:${{ github.head_ref || github.ref }} --follow-tags

  checks:
    name: Checks
    runs-on: ubuntu-latest
    # only run on PR open and synchronize events
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' && github.base_ref == github.event.repository.default_branch }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    # Declare outputs for next jobs
    outputs:
      npm: ${{ steps.npm.outputs.enabled }}
      docker: ${{ steps.docker.outputs.enabled }}
      balena: ${{ steps.balena.outputs.enabled }}
      balena_slugs: ${{ steps.balena_slugs.outputs.build }}

    steps:
      - uses: actions/checkout@v2
        with:
          # Checkout as many commits as needed for the check
          fetch-depth: 1
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - id: npm
        run: |
          if test -f "package.json"; then
            echo "found package.json"
            echo ::set-output name=enabled::"True"
          else
            echo ::set-output name=enabled::"False"
          fi

      - id: docker
        run: |
          if [ -f docker-compose.test.yml ] && [ -f docker-compose.yml ]; then
            echo "found docker-compose.test.yml"
            echo ::set-output name=enabled::"True"
          else
            echo ::set-output name=enabled::"False"
          fi

      - id: balena
        run: |
          if test -f balena.yml
          then
            echo "found balena.yml"
            echo ::set-output name=enabled::"True"
          else
            echo ::set-output name=enabled::"False"
          fi

      - id: balena_slugs
        uses: kanga333/json-array-builder@v0.1.0
        with:
          str: ${{ inputs.balena_deploy_slugs || github.repository }}
          separator: "newline"

  npm_flow:
    name: NPM
    runs-on: ubuntu-latest
    needs: [checks]
    if: needs.checks.outputs.npm == 'True'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    steps:
      - name: Checkout versioned source
        id: versionbot_checkout
        uses: actions/checkout@v3
        continue-on-error: true
        with:
          ref: versionbot/pr/${{ github.event.pull_request.number }}
          fetch-depth: 1
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Checkout original source
        if: ${{ steps.versionbot_checkout.outcome == 'failure' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "${{ inputs.node_version }}"

      - name: Install dependencies
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Run build
        run: npm run build --if-present

      - name: Run tests
        run: npm test

  docker_meta:
    name: Docker meta
    runs-on: ubuntu-latest
    needs: [checks]
    if: needs.checks.outputs.docker == 'True'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    env:
      LOCAL_IMAGE: localhost:5000/sut

    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Generate image labels and tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.docker_images || env.LOCAL_IMAGE }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}

  docker_flow:
    name: Docker
    runs-on: ubuntu-latest
    needs: [checks, docker_meta]
    if: needs.checks.outputs.docker == 'True'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    env:
      COMPOSE_VARS: ${{ secrets.COMPOSE_VARS }}
      LOCAL_IMAGE: localhost:5000/sut
      FLOWZONE_USER: balena-ci # https://github.com/balena-ci

    services:
      registry:
        image: registry:2.8.1
        ports:
          - 5000:5000

    steps:
      - name: Checkout versioned source
        id: versionbot_checkout
        uses: actions/checkout@v3
        continue-on-error: true
        with:
          ref: versionbot/pr/${{ github.event.pull_request.number }}
          fetch-depth: 2
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Checkout original source
        if: ${{ steps.versionbot_checkout.outcome == 'failure' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
          install: true

      - name: Build and push to local registry
        id: build
        uses: docker/build-push-action@v3
        with:
          platforms: ${{ inputs.docker_platforms }}
          labels: ${{ needs.docker_meta.outputs.labels }}
          cache-to: type=gha,mode=max
          cache-from: |
            type=gha
            ${{ needs.docker_meta.outputs.tags }}
            ${{ inputs.docker_cache_from }}
          context: ${{ inputs.docker_context || inputs.working_directory }}
          file: ${{ inputs.docker_file }}
          target: ${{ inputs.docker_target }}
          tags: ${{ env.LOCAL_IMAGE }}:latest
          load: false
          push: true

      # give the local image a bunch of tags that can be referenced in docker-compose.test.yml
      # for example:
      #     "sut:latest",
      #     "product-os/flowzone:latest",
      #     "localhost:5000/sut:latest",
      #     "localhost:5000/sut:pr-5",
      #     "localhost:5000/sut:sha-3cf8975"
      - name: Run docker-compose tests
        env:
          PLATFORMS: ${{ inputs.docker_platforms }}
          TAGS: ${{ needs.docker_meta.outputs.tags }}
        run: |
          if [[ ! -z "${COMPOSE_VARS}" ]]; then
            echo $COMPOSE_VARS | base64 --decode > .env
          fi
          for platform in $PLATFORMS
          do
            docker pull --platform=$platform ${{ env.LOCAL_IMAGE }}:latest
            docker tag ${{ env.LOCAL_IMAGE }}:latest sut:latest
            docker tag ${{ env.LOCAL_IMAGE }}:latest ${{ github.repository }}:latest
            for tag in $TAGS
            do
              docker tag ${{ env.LOCAL_IMAGE }}:latest ${tag}
            done
            docker inspect ${{ env.LOCAL_IMAGE }}:latest
            docker compose -f docker-compose.yml -f docker-compose.test.yml up --no-build --exit-code-from sut
          done

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.FLOWZONE_USER }}
          password: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

      - name: Push draft images to external registries
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ env.LOCAL_IMAGE }}:latest
          dst: |
            ${{ needs.docker_meta.outputs.tags }}

  balena_flow:
    name: balena
    runs-on: ubuntu-latest
    needs: [checks]
    if: needs.checks.outputs.balena == 'True'

    strategy:
      fail-fast: true
      matrix:
        slug: ${{ needs.checks.outputs.balena_slugs }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    steps:
      - name: Checkout original source
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          token: "${{ secrets.FLOWZONE_TOKEN }}"

      - uses: balena-io/deploy-to-balena-action@v0.11.0
        with:
          balena_token: ${{ secrets.BALENA_API_KEY_PUSH }}
          fleet: ${{ matrix.slug }}
          versionbot: true
