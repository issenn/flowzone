name: Test docker
runs-on: ${{ fromJSON(inputs.runs_on) }}
timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
needs: [event_types, project_types, versioned_source]
if: |
  needs.event_types.outputs.do_draft == 'true' &&
  needs.project_types.outputs.docker_compose_test != ''

defaults:
  run:
    working-directory: ${{ inputs.working_directory }}
    shell: bash --noprofile --norc -eo pipefail -x {0}

strategy:
  fail-fast: false
  matrix:
    target: ["default"]
    # platform is limited to one for now to avoid parsing all target/platform pairs from the bake files for testing
    platform: ["linux/amd64"]

env:
  COMPOSE_VARS: ${{ secrets.COMPOSE_VARS }}
  DOCKER_BUILDKIT: "1"
  COMPOSE_FILE: "${{ needs.project_types.outputs.docker_compose }}:${{ needs.project_types.outputs.docker_compose_test }}"
  BAKE_OVERRIDE: /tmp/docker-bake.override.json
  BAKE_EMPTY: /tmp/docker-bake.empty.json

steps:
  # attempt login for to pull private images for caching
  - name: Login to GitHub Container Registry
    continue-on-error: true
    uses: docker/login-action@v2
    with:
      registry: ghcr.io
      username: ${{ env.GHCR_USER }}
      password: ${{ env.GHCR_TOKEN }}

  # attempt login for to pull private images for caching
  - name: Login to Docker Hub
    continue-on-error: true
    uses: docker/login-action@v2
    with:
      registry: docker.io
      username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
      password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}

  - *downloadSourceArtifact
  - *extractSourceArtifact

  - name: Setup QEMU
    uses: docker/setup-qemu-action@v2

  - name: Setup buildx
    uses: docker/setup-buildx-action@v2
    with:
      driver-opts: network=host
      install: true

  - name: Setup docker-compose environment
    run: |
      if [[ -n "${COMPOSE_VARS}" ]]
      then
        echo "${COMPOSE_VARS}" | base64 --decode > .env
      fi

  # this override file will add additional cache sources
  # https://docs.docker.com/build/customize/bake/file-definition/#json-definition
  - name: Create bake override
    run: |
      jq -n '{target:{default:{}}}' > ${BAKE_EMPTY}
      docker buildx bake --print ${{ matrix.target }} \
        -f ${{ join(fromJSON(needs.project_types.outputs.docker_bake),' -f ') || env.BAKE_EMPTY }} \
        | jq '.target |= map_values(."cache-to" += ["type=gha,scope=buildkit,mode=max"])' \
        | jq '.target |= map_values(."cache-from" += ["type=gha,scope=buildkit"])' \
        > "${BAKE_OVERRIDE}"
        jq . "${BAKE_OVERRIDE}"

  # build all docker compose test targets with buildx bake and use the same cache scope as the publish job
  # these images are not pushed and are only used for testing, but can save build time of the publish job
  # https://github.com/docker/bake-action
  - name: Docker bake and load
    uses: docker/bake-action@v2
    with:
      workdir: ${{ inputs.working_directory }}
      files: |
        ${{ env.BAKE_OVERRIDE }}
      # force a single platform as multi-platform images cannot be loaded to local context
      set: |
        *.platform=${{ matrix.platform }}
      load: true
      push: false

  # run docker compose tests and print the logs from all services
  - name: Run docker compose tests
    run: |
      DC_ARGS=''
      if [ -f docker-compose.yml ]; then
        DC_ARGS="${DC_ARGS} -f docker-compose.yml"
      fi
      if [ -f docker-compose.test.yml ]; then
        DC_ARGS="${DC_ARGS} -f docker-compose.test.yml"
      fi
      docker compose ${DC_ARGS} up sut --exit-code-from sut || { docker compose ${DC_ARGS} logs ; exit 1 ; }
      docker compose ${DC_ARGS} logs
